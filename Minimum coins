Minimum coins 

//Problem Link : Minimum Elements (Codestudios) ---> https://www.codingninjas.com/codestudio/problems/minimum-elements_3843091
//Problem Link : Coins Change (LeetCode)    -------> https://leetcode.com/problems/coin-change/description/


//Problem Statement 

We are given a target sum of ‘X’ and ‘N’ distinct numbers denoting the coin denominations. We need to tell the minimum number of coins required to reach the target sum.
We can pick a coin denomination for any number of times we want.

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3

Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Example 3:

Input: coins = [1], amount = 0
Output: 0



//Code follows :  1. Recursion ---> 2. Memoisation --> 3. Tabulation 


//Code:

// 1.Recursion  TC: o(2^n) && Sc : o(N) --> gives TLE

public class Solution {
    public static int minimumElements(int num[], int x) {
        int n = num.length;
        int ans = recursive(n-1, x,num);

        if(ans >= (int)Math.pow(10,9)){
            return  -1;
        }

        return ans;
    }
    public static int recursive(int idx, int target, int num[]){
        if(idx == 0){
            if(target % num[0] == 0){
                return target/num[0];
            }
            else{
                return (int)Math.pow(10,9);
            }
        }

        int nottake = 0 + recursive(idx-1, target, num);
        int take = Integer.MAX_VALUE; // (int)Math.pow(10,9);
        if(num[idx] <= target){
            take= 1 + recursive(idx, target-num[idx], num);
        }


        return Math.min(take,nottake);
    }

}


//2.Memoisation ---> TC O(N*T) ;  SC : o(N*T) + o(T); // t is target

public class Solution {
    public static int minimumElements(int num[], int x) {
        int n = num.length;
        int dp[][] = new int[n][x + 1];

        for(int row[]: dp){
            Arrays.fill(row,-1);
        }

        int ans = memo(n-1, x,num , dp);

        if(ans >= (int)Math.pow(10,9)){
            return  -1;
        }

        return ans;
    }
    public static int memo(int idx, int target, int num[], int dp[][]){
        if(idx == 0){
            if(target % num[0] == 0){
                return target/num[0];
            }
            else{
                return (int)Math.pow(10,9);
            }
        }
        if(dp[idx][target] != -1) return dp[idx][target];
        int nottake = 0 + memo(idx-1, target, num , dp);
        int take = Integer.MAX_VALUE; // (int)Math.pow(10,9);
        if(num[idx] <= target){
            take= 1 + memo(idx, target-num[idx], num, dp);
        }


        return dp[idx][target] =Math.min(take,nottake);
    }

}

//3.Tabulation ----> TC O(N*T) ;  SC : o(N*T)


public class Solution {
    public static int minimumElements(int num[], int x) {
    
        //Tabulation Method
        
        int n = num.length;
        int dp[][] = new int[n][x + 1];

        for(int i = 0 ; i <= x; i++){
            if(i % num[0] == 0){
                dp[0][i] = i/num[0];
            }
            else{
                dp[0][i] = (int)Math.pow(10,9);
            }
        }

        for(int i =1; i<n; i++){
            for(int t= 0 ;t <= x; t++){
                int nottake = 0 + dp[i-1] [t];
                int take = Integer.MAX_VALUE; // (int)Math.pow(10,9);

                if(num[i] <= t){
                   take = 1 + dp[i][t-num[i]]; // 1 + because we are counting
                }

                dp[i][t] = Math.min(take,nottake);

            }
        }

          
        int ans = dp[n-1][x];

        if(ans >= (int)Math.pow(10,9)){
            return  -1;
        }

        return ans;
    }
   
}
