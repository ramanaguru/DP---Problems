
Problem Statement:

Given an array of ‘N’  positive integers, we need to return the maximum sum of the subsequence such that no two elements of the subsequence 
are adjacent elements in the array.

Note: A subsequence of an array is a list with elements of the array where some elements are deleted ( or not deleted at all) 
and the elements should be in the same order in the subsequence as in the array.


Sample Input 1:
2
3
1 2 4
4
2 1 4 9

Sample Output 1:
5
11


//Code

import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		
		//Time complexity : O(N);
		//Space Complexity : O(1);  
		//Most Optimised solution
    
		int prev  = nums.get(0);
		int prev2 = 0;

		for(int i = 1; i < nums.size(); i++){
			int pick = nums.get(i);

			if(i > 1){
				pick += prev2;
			}

			int notPick = 0 + prev;

			int curr_i = Math.max(pick, notPick);

			prev2 = prev;
			prev = curr_i;
		}

		return prev;


		//Tabulation method
    
        int n = nums.size();
		if(n == 0){
			return 0;
		}
		
		ArrayList<Integer>dp = new ArrayList<Integer>(n+1);

		dp.add(0);
		dp.add(nums.get(0));

		for(int i = 2; i <= n ; i++){
			int pick = nums.get(i-1);
			if(i > 1){
                 pick += dp.get(i-2);
			}
			int notPick = 0 + dp.get(i-1);

			dp.add(Math.max(pick, notPick));
		}


		return dp.get(n);

	}
}
