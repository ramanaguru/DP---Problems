0|1 Knapsack (CodeStudios)

//Problem Link ------>  https://www.codingninjas.com/codestudio/problems/0-1-knapsack_920542

//Problem Statement 

A thief wants to rob a store. He is carrying a bag of capacity W. The store has ‘n’ items. Its weight is given by the ‘wt’ array and its value by the ‘val’ array. 
He can either include an item in its knapsack or exclude it but can’t partially have it as a fraction. We need to find the maximum value of items that the thief can steal.



Sample Input:
1 Test case

4 size

1 2 4 5
5 4 8 6

5 Weight

Sample Output:
13


// STEPS -code follows  ----> 1. Recuriosn  --> 2.Memoisation --> 3. Tabulation

// Recursion  ------>  TC :  o(2^N) ; SC : o(N)
//Memoisation ------>  TC :  o(N * W) ; SC : o(N*W) + o(N)
//Tabulation   ------> TC :  o(N * W) ; SC : o(N * W)

//Code

//1.Recuriosn   (Gives TLE so follow steps 2 and 3 to avoid TLE)


public class Solution{

    //recursion Method
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            return recursion(n-1, maxWeight, weight, value);

    }

    public static int recursion(int n , int size, int w[], int v[]){
        if(n == 0){
            if(w[0] <= size){
                return v[0];
            }else{
                return 0;
            }
        }

        int notTake = 0 + recursion(n-1,size,w, v);
        int take = Integer.MIN_VALUE;

        if(w[n] <= size){
            take = v[n] + recursion(n-1, size - w[n], w, v);
        }



        return Math.max(take, notTake);
    }
}


//2.Memoisation


public class Solution{
    //Memoisation Method
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
            
            int dp[][] = new int[n][maxWeight + 1];

            return memo(n-1, maxWeight, weight, value, dp);

    }

    public static int memo(int n , int size, int w[], int v[], int dp[][]){
        if(n == 0){
            if(w[0] <= size){
                return v[0];
            }else{
                return 0;
            }
        }
        if(dp[n][size] != 0) return dp[n][size];
        int notTake = 0 + memo(n-1,size,w, v, dp);
        int take = Integer.MIN_VALUE;

        if(w[n] <= size){
            take = v[n] + memo(n-1, size - w[n], w, v, dp);
        }



        return dp[n][size] =  Math.max(take, notTake);
    }
}


//3.Tabulation Method

public class Solution{
    //Tabulation  Method
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
           
            
            int dp[][] = new int[n][maxWeight + 1];

            for(int i = weight[0]; i <= maxWeight; i++){
                dp[0][i] = value[0];
            }

            for(int idx = 1; idx < n ; idx++){
                for(int capacity = 0 ; capacity <= maxWeight; capacity++){
                    int notTake = 0 + dp[idx-1][capacity];
                    int take = 0;
                    if(weight[idx] <= capacity){
                        take = value[idx] + dp[idx-1][capacity - weight[idx]];
                    }

                    dp[idx][capacity] = Math.max(notTake, take);
                }
            }

            return dp[n-1][maxWeight];


    }

}


