Unique Paths in a Grid --> Leetcode 63

//Problem Link -----> https://leetcode.com/problems/unique-paths-ii/description/

Problem Description
Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). At any instance, if you are on (x, y), 
you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 
respectively in the grid.

Example Input
Input 1:

 A = [
        [0, 0, 0]
        [0, 1, 0]
        [0, 0, 0]
     ]
Input 2:

 A = [
        [0, 0, 0]
        [1, 1, 1]
        [0, 0, 0]
     ]


Example Output
Output 1:

 2
 
Output 2:

 0
 
 //Code
 
 public class Solution {
    public int uniquePathsWithObstacles(int[][] A) {
        //org matrix we understand that 1 is locked 
        int n = A.length;
        int m = A[0].length;
        int dp[][] =  new int[n][m];
        
        if(A[0][0] == 1){
            return 0;
        }

        //first row --> (0,0)(0,1)(0,2) if it 0 make that to 1 else break;
        for(int j = 0; j < m; j++){
            if(A[0][j] == 0){
                dp[0][j] = 1;
            }
            else{
                break;
            }
        }

        //first col--> (0,0)(1,0)(2,0) if it 0 make that to 1 else break;
        for(int i = 0; i < n; i++){
            if(A[i][0] == 0){
                dp[i][0] = 1;
            }
            else{
                break;
            }
        }

        for(int i = 1; i < n; i++){
            for(int j = 1; j < m; j++){
                if(A[i][j] == 1){
                    dp[i][j] = 0;
                }
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }

        return dp[n-1][m-1];
        
    }
}
