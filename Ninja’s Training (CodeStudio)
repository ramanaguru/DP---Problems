Ninja’s Training


//Problem Link --------> https://www.codingninjas.com/codestudio/problems/ninja-s-training_3621003



//Problem Description

A Ninja has an ‘N’ Day training schedule. He has to perform one of these three activities (Running, Fighting Practice, or Learning New Moves) each day. 
There are merit points associated with performing an activity each day. The same activity can’t be performed on two consecutive days. 
We need to find the maximum merit points the ninja can attain in N Days.

We are given a 2D Array POINTS of size ‘N*3’ which tells us the merit point of specific activity on that particular day. 
Our task is to calculate the maximum number of merit points that the ninja can earn.


Sample Input 1:
2 Test Cases

3

1 2 5 
3 1 1
3 3 3

3

10 40 70
20 50 80
30 60 90

Sample Output 1:

11
210




//Code

import java.awt.Desktop.Action;
import java.util.*;

public class Solution {
    
    public static int ninjaTraining(int n, int points[][]) {

        //Tabulation Method ---> Tc : O(n * 4 * 3) ; Sc :  O(n *  4)
        int dp[][] = new int[n][4];
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0],(Math.max(points[0][1], points[0][2])));

        for(int day = 1; day < n; day++){
            for(int last = 0; last < 4; last++){

                dp[day][last] = 0;
               

                for(int task = 0; task < 3; task++){
                    if(task != last){
                        int activity = points[day][task] + dp[day-1][task];
                        dp[day][last]= Math.max(dp[day][last], activity);
                    }
                }
            }
        }

        return dp[n-1][3];

        


        
    }


     public static int ninjaTraining(int n, int points[][]) {
         // Memoisation --> code is correct , but gives. TLE 
         //Tc: O(N*4*3) ; Sc :O(N) + O(N*4)

         int dp[][] = new int[n][4];

         for(int row[] : dp){
             Arrays.fill(row,-1);
         }
             // day,   task 
         return f(n-1,   3,  points,  dp);


        
    }
     public static int f(int day, int last, int points[][], int dp[][]){
           if(dp[day][last] != -1){
               return dp[day][last];
           }
           if(day == 0){
               int maxi = 0;
               
               for(int task = 0; task <= 2; task++){
                   if(task != last){
                       maxi = Math.max(maxi, points[0][task]);
                   }
               }

               return dp[day][last] = maxi;
           }

           int maxi = 0;
           for(int task = 0; task <= 2; task++){
               if(task != last){
                   int activity = points[day][task] + f(day-1, task, points, dp);

                   maxi = Math.max(maxi, activity);
               }             
           }

           return dp[day][last] = maxi;
     }

}
