Maximum Path Sum in the matrix(CodeStudio)

Problem Link ---> https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998

Problem Description: 

We are given an ‘N*M’ matrix. We need to find the maximum path sum from any cell of the first row to any cell of the last row.

At every cell we can move in three directions: to the bottom cell (↓), to the bottom-right cell(↘), or to the bottom-left cell(↙).

Input 1 :
2
4 4(n,m)

1 2 10 4
100 3 2 1
1 1 20 2
1 2 2 1

3 3(n,m)

10 2 3
3 7 2
8 1 5

Output 1 :
105
25

//Code

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int getMaxPathSum(int[][] matrix) {
		int n = matrix.length;
		int m = matrix[0].length;

		int dp[][] = new int[n][m];

		for(int j = 0; j < m; j++){
			dp[0][j]  = matrix[0][j];
		}

		for(int i = 1; i < n ; i++){
			for(int j = 0; j < m; j++){
				int up=Integer.MIN_VALUE;
				int ld=Integer.MIN_VALUE;
				int rd=Integer.MIN_VALUE;

				 up = matrix[i][j] + dp[i-1][j];

				 if(j > 0){
					 ld = matrix[i][j] + dp[i-1][j-1];
				 }
				 if(j < m-1){
					 rd = matrix[i][j] + dp[i-1][j+1];
				 }

				 dp[i][j] = Math.max(up,Math.max(ld,rd));

			}
		}

		int maxi = Integer.MIN_VALUE;
		for(int i = 0; i < m ; i++){
			maxi = Math.max(maxi, dp[n-1][i]);
		}

		return maxi;
	}
}
