

//Problem Link -->  https://www.codingninjas.com/codestudio/problems/partitions-with-given-difference_3751628


/*

Solution :
This question is a slight modification of the problem discussed in Count Subsets with Sum K.

We have the following two conditions given to us.

S1 + S2 = D   – (i)

S1 >= S2     – (ii)

 If we calculate the total sum of elements of the array (say totSum), we can say that,

S1 = totSum – S2      – (iii)

Now solving for equations (i) and (iii), we can say that 

S2 = (totSum – D)/2    – (iv)

Therefore the question “Count Partitions with a difference D” is modified to “Count Number of subsets with sum (totSum – D)/2 ”.


*/






Code

import java.util.* ;
import java.io.*; 
public class Solution {
	static int mod = 1000000000 + 7; //(10 ^ 9 + 7) --> why MOD , since our answer can be very larger we use Mod
	
	public static int countPartitions(int n, int d, int[] arr) {
		int totalSum = 0;
		//s1 >= s2 || s1- s2 = D

		for(int i = 0; i < n ; i++){
			totalSum += arr[i];

		}

		if(totalSum - d < 0 ||  (totalSum - d)%2 == 1){
			return 0 ;
		}


		return findWays(arr, (totalSum-d)/2);

	}
	 public static int findWays(int num[], int tar) {
        //Tabulation  Method ---> TC : o(n * tar) ; SC : o(n * tar)
        int n = num.length;
        int dp[][]= new int[n][tar+1];

    

         if(num[0] == 0) dp[0][0] =2;  // 2 cases -pick and not pick
         else dp[0][0] = 1;  // 1 case - not pick
    
         if(num[0]!=0 && num[0]<=tar) dp[0][num[0]] = 1;  // 1 case -pick

        for(int idx = 1; idx < n; idx++){

            for(int sum = 0; sum <= tar; sum++){

                int notTake = dp[idx-1] [sum];

                int take = 0;

                if(num[idx] <= sum){

                    take = dp[idx-1] [sum - num[idx]];
                 } 


                   dp[idx][sum] = (notTake + take) % mod;

            }
            
        }

        return dp[n-1][tar];

        
   
    }

}
