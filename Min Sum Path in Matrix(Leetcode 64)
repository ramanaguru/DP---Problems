Min Sum Path in Matrix(Leetcode 64)

Problem Link --> https://leetcode.com/problems/minimum-path-sum/description/


Problem Description :

Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.

-----------------------------------------------------------------------------------------------------
Example Input
Input 1:

 A = [
       [1, 3, 2]
       [4, 3, 1]
       [5, 6, 1]
     ]
Input 2:

 A = [
       [1, -3, 2]
       [2, 5, 10]
       [5, -5, 1]
     ]


Example Output
Output 1:

 8
Output 2:

 -1


Example Explanation
Explanation 1:

 The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:

 The path will be: 1 -> -3 -> 5 -> -5 -> 1.
 
 -----------------------------------------------------------------------------------------------------
 
 
 Code
 
 public class Solution {
    public int minPathSum(int[][] A) {
        int n = A.length;
        int m = A[0].length;
        int dp[][] = new int[n][m];

        for(int i = 0; i  < n; i++){
            for(int j = 0; j < m; j++){
                if(i == 0 && j == 0){
                    dp[i][j] = A[i][j];
                }
                else if(i  == 0){
                    dp[i][j] = dp[i][j-1] + A[i][j];
                }
                else if(j == 0){
                    dp[i][j] = dp[i-1][j] + A[i][j];
                }
                else{
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1])+ A[i][j];
                }
            }
        }

        return dp[n-1][m-1];
    }
}
