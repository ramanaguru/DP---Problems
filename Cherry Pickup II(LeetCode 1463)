Cherry Pickup II(LeetCode 1463)


Problem link --> https://leetcode.com/problems/cherry-pickup-ii/


Problem Description: 

We are given an ‘N*M’ matrix. Every cell of the matrix has some chocolates on it, mat[i][j] gives us the number of chocolates.
We have two friends ‘Alice’ and ‘Bob’. initially, Alice is standing on the cell(0,0) and Bob is standing on the cell(0, M-1).
Both of them can move only to the cells below them in these three directions: to the bottom cell (↓), to the bottom-right cell(↘), 
or to the bottom-left cell(↙).

When Alica and Bob visit a cell, they take all the chocolates from that cell with them. It can happen that they visit the same cell, 
in that case, the chocolates need to be considered only once.

They cannot go out of the boundary of the given matrix, we need to return the maximum number of chocolates that Bob and Alice can together collect.



class Solution {
    public int cherryPickup(int[][] grid) {
        //Memoisation  Time Complexity: O(N*M*M) * 9

        //Reason: At max, there will be N*M*M calls of recursion to solve a new problem and in every call, 
        //two nested loops together run for 9 times.

        //Space Complexity: O(N) + O(N*M*M)
        
        int n = grid.length;
        int m = grid[0].length;

        int dp[][][] = new int[n][m][m];

        for(int i = 0; i < n ; i++){
            for(int j = 0; j < m ; j++){
                for(int k =0 ; k < m; k++){
                    dp[i][j][k] = -1;
                }
            }
        }

        return f(0, 0 , m-1,n-1, m-1, grid, dp);

        
    }

    public int f(int i , int j1, int j2, int n , int m, int grid[][], int dp[][][]){
        
        //out of bound base case
        if(j1 < 0 || j1 > m || j2 < 0 || j2 > m){
            return  - (int)1e9; 
        }
        //Destination base case
        if(i == n){
            if(j1 == j2){
                return grid[i][j1];
            }
            else{
                return grid[i][j1] + grid[i][j2];
            }
        }

        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];

        int maxi =  - (int)1e8; 

        for(int delta1 = -1;  delta1 <= 1; delta1++){
            for(int delta2 = -1; delta2 <= 1; delta2++){
                int value = 0;
                if(j1 == j2){
                    value += grid[i][j1];
                }
                else{
                    value  = grid[i][j1]+ grid[i][j2];
                }

                value += f(i+1, j1+delta1, j2 + delta2, n, m, grid, dp);

                maxi  = Math.max(maxi, value);

                dp[i][j1][j2] = maxi;
            }
        }

        return maxi;
    

    }
}




 //Recursion Method ---> code and logic is correct but it throws TLE

// class Solution {
//     public int cherryPickup(int[][] grid) {

//         int n = grid.length;
//         int m =grid[0].length;
        

//         return f(0 , 0 , m-1, n-1, m-1, grid);
//     }

//     public static int f(int i, int j1 , int j2 , int n , int m , int grid[][]){
//         //out of bound base case
//         if(j1 < 0 || j1 > m || j2 < 0 || j2 > m){
//             return  - (int)1e9; 
//         }
//         //Destination base case
//         if(i == n){
//             if(j1 == j2){
//                 return grid[i][j1];
//             }
//             else{
//                 return grid[i][j1] + grid[i][j2];
//             }
//         }

//         int maxi =  - (int)1e8; 

//         for(int delta1 = -1;  delta1 <= 1; delta1++){
//             for(int delta2 = -1; delta2 <= 1; delta2++){
//                 int value = 0;
//                 if(j1 == j2){
//                     value += grid[i][j1];
//                 }
//                 else{
//                     value  = grid[i][j1]+ grid[i][j2];
//                 }

//                 value += f(i+1, j1+delta1, j2 + delta2, n, m, grid);

//                 maxi  = Math.max(maxi, value);
//             }
//         }

//         return maxi;
//     }
// }
