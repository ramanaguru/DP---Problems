 Best Time to Buy and Sell Stock II -(Leetcode 122)
 
 //Problem Link ----> https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
 
 //Problem Statement :
 
 
 You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.



Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7

Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Example 2:

Input: prices = [1,2,3,4,5]
Output: 4

Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.


//IDEA


The basic approach is to understand that each day we have two choices, whether to buy or not buy .
If we have already bought a stock then whether sell it today or not.This requires us to explore all possibilities to get the best result.This is where recursion comes into play.

We use two values of buy ,
if buy=1 ,we can buy a new stock .Hence the available options:
* we buy the current stock ,hence we face a loss of the current stock price
* we don't buy the current stock and just move forward

if buy=0, we are already holding a previous stock ,hence we can
* sell the current stock and face a gain of the current stock value
* not sell the current stock and simply move forward


//Code


class Solution {
    public int maxProfit(int[] prices) {

        //Qn states if u buy  you should sell before buying next time

        //Buy -- > sell ---> Buy(crct way)
        //Buy -- >  Buy -- > sell(wrong way)
        
        //Tabulation Method with sapce opitimised 
        int n = prices.length;

        int dp[] = new int[n+1];

        

        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <=1 ; buy++){
              
                if(buy==0) //what if we still hold stock 
                    dp[buy]=Math.max(dp[0],prices[idx]+dp[1]);
                else 
                    dp[buy]=Math.max(dp[0]-prices[idx],dp[1]);

            }
        }

        return dp[1]; 

        
    }

}
