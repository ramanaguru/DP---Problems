Best Time to Buy and Sell Stock with Cooldown(Leetcode 309)


//Problem link ------>. https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/


//Problem Statement:


You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:

Input: prices = [1,2,3,0,2]
Output: 3

Explanation: transactions = [buy, sell, cooldown, buy, sell]

Example 2:

Input: prices = [1]
Output: 0

====================================================================================================================================


//Code  =========> 1.Memoisation ====> 2. Tabulation


class Solution {
    public int maxProfit(int[] prices) {
        //cooldown ===> cannot buy  rihgt after sell day 

        int n = prices.length;
        int dp[][] = new int[n][2];
        for(int row[]  :dp){
            Arrays.fill(row, -1);
        }
        return f(0,1, prices, n, dp);
        
    }

    public static int f(int idx, int buy, int prices[], int n, int dp[][]){
        //Base case :
        if(idx >= n){
            return 0;
        }
        
        if(dp[idx][buy] != -1) return dp[idx][buy];
        if(buy == 1){
            return dp[idx][buy] =  Math.max(-prices[idx]+ f(idx+1, 0, prices, n, dp) , 0 + f(idx +1, 1,prices,n,dp));
        }
        else{
            return dp[idx][buy] = Math.max(prices[idx]+ f(idx+2,1, prices, n,dp) , 0 + f(idx+1, 0, prices,n,dp));
        }
        
====================================================================================================================================

        //Tabulation :
        
       
        int n = prices.length;
        int dp[][] = new int[n+2][2];
        for(int row[]  :dp){
            Arrays.fill(row, 0);
        }
        
        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <= 1; buy++){
                if(buy == 1){
                    dp[idx][buy] =  Math.max(-prices[idx]+ dp[idx+1][0] , 0 + dp[idx+1][1]);
                }
                else{
                   dp[idx][buy] = Math.max(prices[idx]+ dp[idx+2][1] , 0 + dp[idx+1][0]);
                }

            }
        }

        return dp[0][1];
        

        
    }
}

