Best Time to Buy and Sell Stock with Transaction Fee(LeetCode 714)

//Problem Link -----> https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8

Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6

==========================================================================================================================================================================


//Code ------> 1.Memoisation  ----> 2.Tabulation



// 1.Memoisation


class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int dp[][] = new int[n][2];
        for(int row[]:dp){
            Arrays.fill(row,-1);
        }


        return f(0, 1 , prices, fee, n,dp);
        
    }
    public static int f(int idx, int buy, int prices[], int fee, int n, int dp[][]){
        if(idx == n){
            return 0;
        }
        if(dp[idx][buy] != -1) return dp[idx][buy];
        if(buy ==1){
            return dp[idx][buy] = Math.max(-prices[idx]+ f(idx +1, 0, prices, fee, n, dp) , 0 + f(idx+1, 1,prices,fee, n,dp));
        }
        else{
            return dp[idx][buy]=Math.max(prices[idx] - fee + f(idx+1, 1, prices,fee, n,dp) , 0 + f(idx+1, 0, prices, fee, n,dp));
        }
    }
}


// 2.Tabulation


        int n = prices.length;
        int dp[][] = new int[n+1][2];
       
  
        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <= 1; buy++){

                if(buy == 1){
                    dp[idx][buy] = Math.max(-prices[idx]+dp[idx+1][0] ,  dp[idx+1][1]);
                }
                else{
                    dp[idx][buy] = Math.max(prices[idx]-fee + dp[idx+1][1], dp[idx+1][0]);
                }
            }
        }
        return dp[0][1];







