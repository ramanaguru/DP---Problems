Longest Increasing Subsequence(Leetcode 300)

=====================================================================================================================================

//Problem Link =====>  https://leetcode.com/problems/longest-increasing-subsequence/

=====================================================================================================================================

//Problem Statement :

Given an integer array nums, return the length of the longest strictly increasing subsequence/

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
=====================================================================================================================================


//Code ====> 1. Memoisation --------> 2. Tabulation


1. Memoisation  -----> Tc : O(N*N)   ;     Sc : O(N*N) + O(N)



class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;

        int dp[][] = new int [n][n+1];

        for(int row[] : dp){
            Arrays.fill(row, -1);
        }

        return f(0, -1, nums, dp,  n);
    }

    public static int f(int idx, int prev, int nums[],int dp[][], int n){
        if(idx == n){
            return 0;
        }
        if(dp[idx][prev+1] != -1) return dp[idx][prev+1];

        int len = f(idx+1, prev ,nums, dp ,n); //Not take 
        if(prev == -1 || nums[idx] > nums[prev]){
            len = Math.max(len , 1 + f(idx + 1, idx , nums, dp, n)); // take  ====> move the next index, this current idx is ur prev
        }

        return dp[idx][prev+1] = len;
    }
}

=====================================================================================================================================


2. Tabulation     ---------->  -----> Tc : O(N*N)  ;   Sc : O(N*N)  












