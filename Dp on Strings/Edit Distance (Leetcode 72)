Edit Distance (Leetcode 72)
=====================================================================================================================================
But I have coded in codeninjas
//Problem Link =======>.
//Problem Link =======>. https://leetcode.com/problems/edit-distance/

=====================================================================================================================================

//Problem Statement:

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3

Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5

Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


=====================================================================================================================================

//Code ==============> 1. Recursion ----> 2. Memoisation ---> 3. Tabulation


//1. Recursion ------> Tc :  exponential   ;   Sc : o(N * M)

import java.util.*;
public class Solution {
    //Recursion Method

    public static int editDistance(String str1, String str2) {
        
        int n = str1.length();
        int m = str2.length();

        return f(n-1,m-1,str1, str2);
    }

    public static int f(int i, int j ,String s1, String s2){
       if(i < 0) return j + 1;        //s1 exhausted we need to insert j characters.
       if(j < 0) return i + 1;       //s2 exhausted we need to delete i characters.

       if(s1.charAt(i) == s2.charAt(j)){
           return f(i-1, j-1 , s1, s2);
       }

       return 1 + Math.min(f(i-1,j, s1,s2) , Math.min(f(i,j-1,s1,s2) , f(i-1,j-1,s1,s2)));


          
    }
}



=====================================================================================================================================

//2. Memoisation  ------> Tc : o(N * M)    ;   Sc : o(N * M) + o(n)     // o(n) is auxillary space

import java.util.*;
public class Solution {
    //Recursion Method

    public static int editDistance(String str1, String str2) {
        
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n][m];

        for(int row[] : dp){
            Arrays.fill(row, -1);
        }

        return f(n-1,m-1,str1, str2, dp);
    }

    public static int f(int i, int j ,String s1, String s2, int dp[][]){
       if(i < 0) return j + 1; //s1 exhausted we need to insert j characters.
       if(j < 0) return i + 1; //s2 exhausted we need to delete i characters.
       
       if(dp[i][j] != -1)  return dp[i][j];

       if(s1.charAt(i) == s2.charAt(j)){
           return dp[i][j] =  f(i-1, j-1 , s1, s2, dp);
       }

       return dp[i][j] =  1 + Math.min(f(i-1,j, s1,s2, dp) , Math.min(f(i,j-1,s1,s2, dp) , f(i-1,j-1,s1,s2, dp)));


          
    }
}


=====================================================================================================================================


3. Tabulation -----> Tc : o(N * M)    ;   Sc : o(N * M)




import java.util.*;
public class Solution {
    //Recursion Method

    public static int editDistance(String str1, String str2) {
        
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];

       for(int i = 0; i <= n; i++){
           dp[i][0] = i;  
       }
       for(int i = 0; i <= m; i++){
           dp[0][i] = i; 
       }

       for(int i= 1; i <= n ;i++){
           for(int j =1; j <= m; j++){
                if(str1.charAt(i-1) == str2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }
                else dp[i][j] = 1 + Math.min(dp[i][j-1] , Math.min(dp[i-1][j], dp[i-1][j-1]));
           }

       }

       return dp[n][m];

        
    }       
}










