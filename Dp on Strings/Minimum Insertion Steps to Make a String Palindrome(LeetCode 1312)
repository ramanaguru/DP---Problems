Minimum Insertion Steps to Make a String Palindrome(LeetCode 1312)

//Problem Link ===> https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/
===================================================================================================================================================

//Problem Statement :


Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

===================================================================================================================================================

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.

Example 2:

Input: s = "mbadm"
Output: 2

Explanation: String can be "mbdadbm" or "mdbabdm".


Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".


===================================================================================================================================================

===================================================================================================================================================

//Observastion ====> String  length - lps(String). [i.e. n - lps(s) ]
//CALL LPS OF THE STRING
//LCS OF STRING AND REVERSE OF STRING


===================================================================================================================================================



//Code =====> Tabulation Method

TC  : O(N*N)    &&  SC : O(N*N)



class Solution {
    public int minInsertions(String s) {
	int n = s.length();
        return n - longestPalindromeSubsequence(s);
    }

    public static int longestPalindromeSubsequence(String s) {
		
		String t = s;
		String revs1 = new StringBuilder(t).reverse().toString();


		return lcs(s, revs1);
	}


	public static int lcs(String s1, String s2) {
		int n = s1.length();
		int m = s2.length();

		int dp[][] = new int[n+1][m+1];

		for(int row[] :dp){
			Arrays.fill(row, -1);
		}

		for(int i = 0 ; i<= n; i++){
			dp[i][0] = 0;
		}

		for(int j = 0; j<= m; j++){
			dp[0][j] = 0;
		}

		for(int i = 1; i<= n; i++){
			for(int j =1; j <= m ;j++){
				if(s1.charAt(i-1) == s2.charAt(j-1)){
					dp[i][j] =1 + dp[i-1][j-1];
				}
				else{
					dp[i][j] = 0 + Math.max(dp[i-1][j] , dp[i][j-1]);
				}
			}
		}

		return dp[n][m];

          
	}
}


===================================================================================================================================================
