Shortest Common Supersequence (Leetcode 1092)
=====================================================================================================================================

//Problem Link ===========> https://leetcode.com/problems/shortest-common-supersequence/description/

=====================================================================================================================================

//Problem Statement

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.


Example 1:

Input: str1 = "abac", str2 = "cab"

Output: "cabac"

Explanation: 

str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
===================================================================================

Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"

Output: "aaaaaaaa"

=====================================================================================================================================

=====================================================================================================================================

Intuition

Simple DP OF LCS should be applied as taking about common subsequence.
We first find the LONGEST COMMON SUBSEQUENCE.
This should be present only once making string smallest as possible.
We need to print the LCS and in doing soo when getting same character at row and column we just do it one time and add it.
Otherwise if i-1 is big that means we move up and would not add string at index i-1 , so add it now to ans as it should be present.
Similarly for index j-1.
At end print the remaining of both the strings as remaining could not be get by dp array
=====================================================================================================================================

Approach

DO LCS
Print LCS with the above conditions

Algorithm we followed

We start from cell dp[n][m]. Initially i=n and j=m.
At every cell, we will check if S1[i-1] == S2[j-1], if it is then it means this character is a part of the longest common subsequence. 
So we will push it to the ans string str. Then we will move to the diagonally top-left(↖)  cell by assigning i to i-1 and j to j-1.
Else, this character is not a part of the longest common subsequence so we include it in ans string. Originally this cell got its value from its left cell (←) or from its top cell (↑). Whichever cell’s value will be more of the two, we will move to that cell.
We will continue till i>0 and j>0, failing it we will break from the loop.
After breaking, either i>0 or j>0 (only one condition will fail to break from the while loop), if(i>0) we push all the characters from S1 to ans string, else if(j>0), 
we push all the remaining characters from S2.
At last, we reverse the ‘ans’ string and we get our answer.


=====================================================================================================================================

Complexity
Time complexity : O(n * m)
Space complexity: O(n * m)


=====================================================================================================================================


//Code

import java.util.*;

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {

        int n  = str1.length();
        int m  = str2.length();

        int dp[][] = new int[n+1][m+1];
       

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (str1.charAt(i-1) == str2.charAt(j-1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        
        int i = n;
        int j = m;

        String ans = "" ;


        while (i >=1 && j >= 1) {
            if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
               ans += str1.charAt(i-1);  
                   
                i--;
                j--;
            } 
            else {
                if (dp[i - 1][j] >= dp[i][j - 1]) {
                    ans += str1.charAt(i-1);
                    i--;
                }           
                else {
                    ans += str2.charAt(j-1);
                    j--;
                }
            }
        }
        while(i >= 1){
            ans += str1.charAt(i-1);
            i--;
        }

        while(j >=1){
            ans += str2.charAt(j-1);
            j--;
        }

        String ans1 = new StringBuilder(ans).reverse().toString();

        return ans1;
    
    }
}



=====================================================================================================================================
