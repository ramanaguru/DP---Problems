Longest Palindromic Subsequence (Leetcode 516)

========================================================================================================================================================
//Problem  Link ===> https://www.codingninjas.com/codestudio/problems/longest-palindromic-subsequence_842787?leftPanelTab=0     (CodeNinjas)
//Problem  Link ===> https://leetcode.com/problems/longest-palindromic-subsequence/description/ 
========================================================================================================================================================

//Problem Statement :-

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 =====================================================================================================================================

Example 1:

Input: s = "bbbab"
Output: 4

Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:

Input: s = "cbbd"
Output: 2

Explanation: One possible longest palindromic subsequence is "bb".

=====================================================================================================================================


//Code  ===> work in codeninjas

//Observation ===> first reverse the given string and call LCS function

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int longestPalindromeSubsequence(String s) {
  
		String t = s;
		String revs1 = new StringBuilder(t).reverse().toString();


		return lcs(s, revs1);
    
	}


	public static int lcs(String s1, String s2) {
		int n = s1.length();
		int m = s2.length();

		int dp[][] = new int[n+1][m+1];

		for(int row[] :dp){
			Arrays.fill(row, -1);
		}

		for(int i = 0 ; i<= n; i++){
			dp[i][0] = 0;
		}

		for(int j = 0; j<= m; j++){
			dp[0][j] = 0;
		}

		for(int i = 1; i<= n; i++){
			for(int j =1; j <= m ;j++){
				if(s1.charAt(i-1) == s2.charAt(j-1)){
					dp[i][j] =1 + dp[i-1][j-1];
				}
				else{
					dp[i][j] = 0 + Math.max(dp[i-1][j] , dp[i][j-1]);
				}
			}
		}

		return dp[n][m];

          
	}
}


=====================================================================================================================================
