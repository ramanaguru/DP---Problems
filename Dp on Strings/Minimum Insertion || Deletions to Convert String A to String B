Minimum Insertions/Deletions to Convert String A to String B  (CodeNinjas)

=====================================================================================================================================

//Problem Link =======> https://www.codingninjas.com/codestudio/problems/can-you-make_4244510

=====================================================================================================================================

//Problem Statement :

Minimum Insertions/Deletions to Convert String A to String B

We are given two strings, str1 and str2. We are allowed the following operations:

Delete any number of characters from string str1.

Insert any number of characters in string str1.

We need to tell the minimum operations required to convert str1 to str2.

=====================================================================================================================================
Sample Input 1 :
2
abcd anc
aa aaa

Sample Output 1 :
3
1

Explanation For Sample Output 1:
For the first test case,
str = “abcd”, ptr = “anc”


In one operation remove str[3], after this operation str becomes “abc”.
In the second operation remove str[1], after this operation str becomes “ac”.
In the third operation add ‘n’ in str[1], after this operation str becomes “anc”.

Hence, the output will be 3.

For the second test case,
str = “aaa”, ptr = “aa”

In one operation remove str[2], after this operation str becomes “aa”.

Hence, the output will be 1.


=====================================================================================================================================

=====================================================================================================================================

// Observation :-


The easiest way is to remove all the characters of str1 and then insert all the characters of str2. In this way, 
we will convert str1 to str2 with ‘n+m’ operations. (Here n and m are the length of strings str1 and str2 respectively). 
The problem states us to find the minimum of insertions. Let us try to figure it out:

To minimize the operations, we will first try to refrain from deleting those characters which are already present in str2. 
More extensively, we refrain from deleting those characters which are common and come in the same order.

To minimize the operations, we would like to keep the maximum common characters coming in the same order intact. 
These maximum characters are the characters of the longest common subsequence. 

We will first keep the longest common subsequence of the str1 and str2 
intact in str1 and delete all other characters from str1.


The algorithm is stated as follows:
Let n and m be the length of str1 and str2 respectively.
Find the length of the longest common subsequence ( say k) of str1 and str2 as discussed in  Longest Common Subsequence.
Return (n-k) + (m-k) as answer.

=====================================================================================================================================


// Code ===> Tabulation Method

TC : O(N*M) ;   SC : O(N*M)

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int canYouMake(String str, String ptr) {
        return str.length() + ptr.length() - 2 * lcs(str, ptr);
    }
    public static int lcs(String s1, String s2){
        int n = s1.length();
        int m = s2.length();

        int dp[][] = new int[n+1][m+1];

        for(int row[]: dp){
            Arrays.fill(row, 0);
        }

        for(int i =1; i <= n; i++){
            for(int j =1; j <= m; j++){
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else{
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }

        return dp[n][m];
    }

}

=====================================================================================================================================


